@page "/"
@rendermode InteractiveServer
@using Labb2WebbTemplate.shared.DTOs
@using Labb2WebbTemplate.shared.Entities
@inject IHttpClientFactory HttpClientFactory
<PageTitle>Home</PageTitle>

<h1>Hello, world!</h1>

Welcome to your new app.


<div class="product-grid">
	@foreach (var product in Products)
	{
		<div class="product-card">
			<h3>@product.Name</h3>
			<p><strong>Id:</strong> @product.Id</p>
			<p><strong>Price:</strong> @product.Price</p>
			<p><strong>Description:</strong> @product.Description</p>
			<p><strong>Type:</strong> @product.ProductType</p>
			<p><strong>Inventory:</strong> @product.Inventory</p>
			<p><strong>Inventory Balance:</strong> @product.InventoryBalance</p>
		</div>
	}
	</div>

	<button @onclick="GetProducts">Get Products</button>
	
	
	<h2>Add New Product</h2>
	<form>
		<label for="productName">Product Name:</label>
		<input type="text" id="productName" @bind="NewProduct.Name" /><br />

		<label for="productDescription">Description:</label>
		<input type="text" id="productDescription" @bind="NewProduct.Description" /><br />

		<label for="productPrice">Price:</label>
		<input type="number" id="productPrice" @bind="NewProduct.Price" /><br />

		<label for="productType">Product Type:</label>
		<input type="text" id="productType" @bind="NewProduct.ProductType" /><br />

		<label for="productInventory">Inventory:</label>
		<input type="number" id="productInventory" @bind="NewProduct.Inventory" /><br />

		<label for="inventoryBalance">Inventory Balance:</label>
		<input type="checkbox" id="inventoryBalance" @bind="NewProduct.InventoryBalance" /><br />

		<button type="submit" @onclick="AddProduct">Add Product</button>
	</form>
	
	
	

	@code
{

    public List<GetProductDto>? Products { get; set; } = new();
	public PostProductDto NewProduct { get; set; } = new();


    // protected override async Task OnInitializedAsync()
    // {
    //     var httpClient = HttpClientFactory.CreateClient("Labb2WebbTemplate"); //Den vi skapade i Client i program.cs
    //     var response = await httpClient.GetAsync("/products");

    //     if (response.IsSuccessStatusCode)
    //     {
	   //      var products = await response.Content.ReadFromJsonAsync<List<GetProductDto>>();
	   //      Products.AddRange(products);
    //     }

    //     // var bodyAsString = response.Content.ReadAsStringAsync();

    // }

    private async Task GetProducts()
    {
	    var httpClient = HttpClientFactory.CreateClient("Labb2WebbTemplate");
	    var response = await httpClient.GetAsync("/products");

	    if (response.IsSuccessStatusCode)
	    {
		    var products = await response.Content.ReadFromJsonAsync<List<GetProductDto>>();

			Products.Clear();

		    Products.AddRange(products);
	    }
    }

    private async Task AddProduct()
    {
	    var httpClient = HttpClientFactory.CreateClient("Labb2WebbTemplate");

	    var response = await httpClient.PostAsJsonAsync("/products", NewProduct);

	    if (response.IsSuccessStatusCode)
	    {
			NewProduct = new PostProductDto();
	    }
    }

}

		
	<style>
    .product-grid {
        display: flex;
        flex-wrap: wrap;
        justify-content: space-between;
    }

    .product-card {
        width: calc(33.33% - 20px); /* Tar upp en tredjedel av bredden med 20px mellanrum */
        margin-bottom: 20px; /* Mellanrum mellan varje produktkort */
        padding: 20px;
        border: 1px solid #ccc;
        border-radius: 5px;
        box-shadow: 0 0 5px rgba(0, 0, 0, 0.1);
    }
</style>